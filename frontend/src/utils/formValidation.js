/**
 * Validate report form data
 * @param {Object} formData - The report form data
 * @param {number} step - The current step (1-4)
 * @returns {Object} - { isValid: boolean, errors: Object }
 */
export const validateReportForm = (formData, step) => {
  const errors = {};

  // Step 1: Basic information
  if (step === 1) {
    if (!formData.title?.trim()) {
      errors.title = 'Report title is required';
    }
    
    if (!formData.clientName?.trim()) {
      errors.clientName = 'Client name is required';
    }
    
    // Validate property address fields if any are filled in
    const addressFields = Object.values(formData.propertyAddress || {});
    const hasPartialAddress = addressFields.some(field => field && field !== 'USA');
    const allRequiredFieldsPresent = formData.propertyAddress?.street?.trim() && 
                                     formData.propertyAddress?.city?.trim() && 
                                     formData.propertyAddress?.state?.trim() && 
                                     formData.propertyAddress?.zipCode?.trim();
    
    if (hasPartialAddress && !allRequiredFieldsPresent) {
      errors.propertyAddress = 'Please complete all address fields or leave them all empty';
    }
    
    // Validate inspection date
    if (!formData.inspectionDate) {
      errors.inspectionDate = 'Inspection date is required';
    }
  }
  
  // Step 2: Photos
  // Photo validation would typically happen in the PhotoUploadStep component
  
  // Step 3: AI Analysis
  if (step === 3) {
    // No strict validation requirements for summary or damages
    // These are typically generated by AI
  }
  
  // Step 4: Review
  if (step === 4) {
    // Final validation before submission
    if (!formData.title?.trim()) {
      errors.title = 'Report title is required';
    }
    
    if (!formData.clientName?.trim()) {
      errors.clientName = 'Client name is required';
    }
    
    if (!formData.inspectionDate) {
      errors.inspectionDate = 'Inspection date is required';
    }
    
    // Validate required property address fields for final submission
    if (!formData.propertyAddress?.street?.trim()) {
      errors.propertyAddressStreet = 'Street address is required';
    }
    
    if (!formData.propertyAddress?.city?.trim()) {
      errors.propertyAddressCity = 'City is required';
    }
    
    if (!formData.propertyAddress?.state?.trim()) {
      errors.propertyAddressState = 'State is required';
    }
    
    if (!formData.propertyAddress?.zipCode?.trim()) {
      errors.propertyAddressZip = 'Zip code is required';
    }
  }
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
};

/**
 * Get form error message for display
 * @param {Object} errors - Error object from validateReportForm
 * @returns {string} - Formatted error message
 */
export const getFormErrorMessage = (errors) => {
  if (!errors || Object.keys(errors).length === 0) {
    return '';
  }
  
  // Check for address-related errors
  const addressErrors = [
    'propertyAddressStreet', 
    'propertyAddressCity', 
    'propertyAddressState', 
    'propertyAddressZip'
  ].filter(key => errors[key]);
  
  if (addressErrors.length > 0) {
    return 'Please complete all property address fields before submitting (street, city, state, and zip code).';
  }
  
  // Return the first error message for other error types
  const firstError = Object.values(errors)[0];
  return firstError;
}; 